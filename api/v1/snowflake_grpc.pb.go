// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/v1/snowflake.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SnowflakeID_NextID_FullMethodName          = "/SnowflakeID/nextID"
	SnowflakeID_NextMultipleIDs_FullMethodName = "/SnowflakeID/nextMultipleIDs"
)

// SnowflakeIDClient is the client API for SnowflakeID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnowflakeIDClient interface {
	NextID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IDResponse, error)
	NextMultipleIDs(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IDResponse], error)
}

type snowflakeIDClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowflakeIDClient(cc grpc.ClientConnInterface) SnowflakeIDClient {
	return &snowflakeIDClient{cc}
}

func (c *snowflakeIDClient) NextID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, SnowflakeID_NextID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowflakeIDClient) NextMultipleIDs(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IDResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SnowflakeID_ServiceDesc.Streams[0], SnowflakeID_NextMultipleIDs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[wrapperspb.UInt32Value, IDResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SnowflakeID_NextMultipleIDsClient = grpc.ServerStreamingClient[IDResponse]

// SnowflakeIDServer is the server API for SnowflakeID service.
// All implementations must embed UnimplementedSnowflakeIDServer
// for forward compatibility.
type SnowflakeIDServer interface {
	NextID(context.Context, *emptypb.Empty) (*IDResponse, error)
	NextMultipleIDs(*wrapperspb.UInt32Value, grpc.ServerStreamingServer[IDResponse]) error
	mustEmbedUnimplementedSnowflakeIDServer()
}

// UnimplementedSnowflakeIDServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSnowflakeIDServer struct{}

func (UnimplementedSnowflakeIDServer) NextID(context.Context, *emptypb.Empty) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextID not implemented")
}
func (UnimplementedSnowflakeIDServer) NextMultipleIDs(*wrapperspb.UInt32Value, grpc.ServerStreamingServer[IDResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NextMultipleIDs not implemented")
}
func (UnimplementedSnowflakeIDServer) mustEmbedUnimplementedSnowflakeIDServer() {}
func (UnimplementedSnowflakeIDServer) testEmbeddedByValue()                     {}

// UnsafeSnowflakeIDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnowflakeIDServer will
// result in compilation errors.
type UnsafeSnowflakeIDServer interface {
	mustEmbedUnimplementedSnowflakeIDServer()
}

func RegisterSnowflakeIDServer(s grpc.ServiceRegistrar, srv SnowflakeIDServer) {
	// If the following call pancis, it indicates UnimplementedSnowflakeIDServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SnowflakeID_ServiceDesc, srv)
}

func _SnowflakeID_NextID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeIDServer).NextID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnowflakeID_NextID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeIDServer).NextID(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnowflakeID_NextMultipleIDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.UInt32Value)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnowflakeIDServer).NextMultipleIDs(m, &grpc.GenericServerStream[wrapperspb.UInt32Value, IDResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SnowflakeID_NextMultipleIDsServer = grpc.ServerStreamingServer[IDResponse]

// SnowflakeID_ServiceDesc is the grpc.ServiceDesc for SnowflakeID service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnowflakeID_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SnowflakeID",
	HandlerType: (*SnowflakeIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "nextID",
			Handler:    _SnowflakeID_NextID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "nextMultipleIDs",
			Handler:       _SnowflakeID_NextMultipleIDs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/snowflake.proto",
}
