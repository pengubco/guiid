// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/v1/snowflake.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnowflakeIDClient is the client API for SnowflakeID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnowflakeIDClient interface {
	NextID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IDResponse, error)
}

type snowflakeIDClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowflakeIDClient(cc grpc.ClientConnInterface) SnowflakeIDClient {
	return &snowflakeIDClient{cc}
}

func (c *snowflakeIDClient) NextID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IDResponse, error) {
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, "/SnowflakeID/nextID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnowflakeIDServer is the server API for SnowflakeID service.
// All implementations must embed UnimplementedSnowflakeIDServer
// for forward compatibility
type SnowflakeIDServer interface {
	NextID(context.Context, *emptypb.Empty) (*IDResponse, error)
	mustEmbedUnimplementedSnowflakeIDServer()
}

// UnimplementedSnowflakeIDServer must be embedded to have forward compatible implementations.
type UnimplementedSnowflakeIDServer struct {
}

func (UnimplementedSnowflakeIDServer) NextID(context.Context, *emptypb.Empty) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextID not implemented")
}
func (UnimplementedSnowflakeIDServer) mustEmbedUnimplementedSnowflakeIDServer() {}

// UnsafeSnowflakeIDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnowflakeIDServer will
// result in compilation errors.
type UnsafeSnowflakeIDServer interface {
	mustEmbedUnimplementedSnowflakeIDServer()
}

func RegisterSnowflakeIDServer(s grpc.ServiceRegistrar, srv SnowflakeIDServer) {
	s.RegisterService(&SnowflakeID_ServiceDesc, srv)
}

func _SnowflakeID_NextID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeIDServer).NextID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SnowflakeID/nextID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeIDServer).NextID(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SnowflakeID_ServiceDesc is the grpc.ServiceDesc for SnowflakeID service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnowflakeID_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SnowflakeID",
	HandlerType: (*SnowflakeIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "nextID",
			Handler:    _SnowflakeID_NextID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/snowflake.proto",
}
